package __PATH_CONFIG_ALIAS__

import (
	pb "__PATH_PROJECT_PROTO__/__NAME_PROTO__"
	"context"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"log"
	"net"
	"net/http"
	"os"
	"strings"
	"time"
)


func init() {
	log.SetPrefix("TRACE: ")
	log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile)
}



type Data struct {
__STRUCT_DATA__
}

type ReqReadConfig struct {
	IsReadByDefault string `json:"is_read_by_default"`
	IsReadByGrpc    string `json:"is_read_by_grpc"`
	IsReadByEnv     string `json:"is_read_by_env"`
	IsReadByFile    string `json:"is_read_by_file"`
	IsReadByInput   string `json:"is_read_by_input"`
	IsWebUi         string `json:"is_web_ui"`
	PathConfig      string `json:"path_config"`
}

var DefaultReqReadConfig = ReqReadConfig{
	IsReadByDefault: "true",
	IsReadByGrpc:    "true",
	IsReadByEnv:     "true",
	IsReadByFile:    "true",
	IsReadByInput:   "true",
	IsWebUi:         "true",
	PathConfig:      "__READ_BY_UI__",
}

func ReadConfig(interfaceReqReadConfig interface{}) (err error, conf Config) {
	var reqReadConfig ReqReadConfig
	switch interfaceReqReadConfig.(type) {
	case ReqReadConfig:
		reqReadConfig = interfaceReqReadConfig.(ReqReadConfig)
	default:
		log.Println("will be use default ReqConfig")
		reqReadConfig = DefaultReqReadConfig
	}


	switch reqReadConfig.IsReadByGrpc {
	case "true":
		go func() {
			server := grpc.NewServer()
			pb.RegisterConfigServer(server, &ConfigServer{})
			lis, _ := net.Listen("tcp", "127.0.0.1:2023")
			server.Serve(lis)
		}()
		time.Sleep(time.Second * 4)
	case "false":
	default:
		log.Fatalln("is_read_by_grpc is not true or false")
	}
	switch reqReadConfig.IsReadByDefault {
	case "true":
		conf.ReadByDefault()
	case "false":
	default:
		log.Fatalln("is_read_by_default is not true or false")
	}

	switch reqReadConfig.IsReadByGrpc {
	case "true":
		conf.ReadByGrpc()
	case "false":
	default:
		log.Fatalln("is_read_by_grpc is not true or false")
	}
	switch reqReadConfig.IsReadByEnv {
	case "true":
		conf.ReadByEnv()
	case "false":
	default:
		log.Fatalln("is_read_by_env is not true or false")

	}
	switch reqReadConfig.IsReadByFile {
	case "true":
		conf.ReadByFile(ReqReadByFile{PathConfig: reqReadConfig.PathConfig})
	case "false":
	default:
		log.Fatalln("is_read_by_file is not true or false")

	}
	switch reqReadConfig.IsReadByInput {
	case "true":
		conf.ReadByInput()
	case "false":
	default:
		log.Fatalln("is_read_by_input is not true or false")

	}

	if len(strings.Trim(reqReadConfig.PathConfig, " ")) == 0 {
		log.Fatalln("path_config is empty")
	}


	if len(conf.Errors) > 0 {
		for k, v := range conf.Errors {
			log.Println("error", k, ":", v.Error())
		}
		panic("ERROR: PLEASE fix above errors")
	}
	log.Println(fmt.Sprintf("%+v", conf.Data))
	//for _, v := range conf.Metadata.Change {
	//	log.Println(v)
	//}

	if reqReadConfig.IsWebUi == "true" {

        go func() {

            pathWebserver := "__PATH_WEBSERVER__"
            router := gin.Default()
            gin.ForceConsoleColor()
            router.Use(Cors())
            router.LoadHTMLGlob(pathWebserver+"/templates/*")
            router.StaticFile("/favicon.ico", pathWebserver+"/static/ico/favicon.ico")

            routerConfig := router.Group("/")
            {
                routerConfig.GET("/config", func(c *gin.Context) {
                    byteConfData, err := json.Marshal(conf.Data)
                    if err != nil {
                        log.Fatalln(err)
                    }
                    var mapConfData map[string]string
                    err = json.Unmarshal(byteConfData, &mapConfData)
                    if err != nil {
                        log.Fatalln(err)
                    }
                    c.HTML(http.StatusOK, "ui.tmpl", gin.H{
                        "dynamic": string(byteConfData),
                        "table":   mapConfData,
                    })

                })
                routerConfig.POST("/config/update", func(c *gin.Context) {
                    var data Data
                    err := c.BindJSON(&data)
                    if err != nil {
                        log.Println(err)
                        c.JSON(http.StatusOK, err)
                        return
                    }
                    conf.Data = data
                    byteConfig, err := json.Marshal(conf.Data)
                    if err != nil {
                        c.JSON(http.StatusOK, err)
                        return
                    }
                    err = os.WriteFile(reqReadConfig.PathConfig, byteConfig, 0600)
                    if err != nil {
                        c.JSON(http.StatusOK, err)
                        return
                    }

                    c.JSON(http.StatusOK, map[string]string{"msg": "配置更新完毕，已写入配置文件，重启应用即可生效"})

                })
            }
            log.Println("wait a minute, you can access http://localhost:8081/config")
            router.Run(":8081")
        }()
	}

	return nil, conf
}


type Config struct {
	Metadata Metadata `json:"metadata"`
	Data     Data     `json:"data"`
	Errors   []error  `json:"errors"`
}

type Metadata struct {
	Change Change `json:"change"`
}
type Change []string

type ConfigServer struct {
	pb.UnimplementedConfigServer
}

func (s *ConfigServer) ReadConfig(ctx context.Context, request *pb.RequestReadConfig) (*pb.ReplyReadConfig, error) {
	//log.Println(request.FromId)
	//log.Println(request.FromNickname)
	//log.Println(request.Content)
	return &pb.ReplyReadConfig{
		Code:    200,
		Content: "{\"is_home\":\"grpc:true\",\"is_company\":\"grpc:false\"}",
		Count:   1,
		Msg: &pb.Msg{
			Success: "success",
			Fail:    "",
		},
	}, nil
}


func (detail *Config) ReadByInput() {

__READ_BY_INPUT__

}

type ReqReadByFile struct {
	PathConfig string `json:"path_config"`
}

func (detail *Config) ReadByFile(interfaceReqReadByFile interface{}) {

__READ_BY_FILE__

}

func (detail *Config) ReadByEnv() {

__READ_BY_ENV__

}

func (detail *Config) ReadByGrpc() {

__READ_BY_GRPC__

}

func (detail *Config) ReadByDefault() {

__READ_BY_DEFAULT__

}


func Cors() gin.HandlerFunc {
	return func(c *gin.Context) {
		method := c.Request.Method               //请求方法
		origin := c.Request.Header.Get("Origin") //请求头部
		var headerKeys []string                  // 声明请求头keys
		for k, _ := range c.Request.Header {
			headerKeys = append(headerKeys, k)
		}
		headerStr := strings.Join(headerKeys, ", ")
		if headerStr != "" {
			headerStr = fmt.Sprintf("access-control-allow-origin, access-control-allow-headers, %s", headerStr)
		} else {
			headerStr = "access-control-allow-origin, access-control-allow-headers"
		}
		if origin != "" {
			c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
			c.Header("Access-Control-Allow-Origin", "*")                                       // 这是允许访问所有域
			c.Header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE,UPDATE") //服务器支持的所有跨域请求的方法,为了避免浏览次请求的多次'预检'请求
			//  header的类型
			c.Header("Access-Control-Allow-Headers", "Authorization, Content-Length, X-CSRF-Token, Token,session,X_Requested_With,Accept, Origin, Host, Connection, Accept-Encoding, Accept-Language,DNT, X-CustomHeader, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Pragma")
			//              允许跨域设置                                                                                                      可以返回其他子段
			c.Header("Access-Control-Expose-Headers", "Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers,Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,FooBar") // 跨域关键设置 让浏览器可以解析
			c.Header("Access-Control-Max-Age", "172800")                                                                                                                                                           // 缓存请求信息 单位为秒
			c.Header("Access-Control-Allow-Credentials", "false")                                                                                                                                                  //  跨域请求是否需要带cookie信息 默认设置为true
			c.Set("content-type", "application/json")                                                                                                                                                              // 设置返回格式是json
		}

		//放行所有OPTIONS方法
		if method == "OPTIONS" {
			c.JSON(http.StatusOK, "Options Request!")
		}
		// 处理请求
		c.Next() //  处理请求
	}
}